import {
  NEXT_WINDOW_HISTORY_SUPPORT_VERSION,
  __privateAdd,
  __privateGet,
  __privateSet
} from "./chunk-BXZUXUGF.mjs";

// src/react/router/next.ts
import { usePathname, useRouter, useSearchParams } from "next/navigation";
var useNextRouter = () => {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = typeof window === "undefined" ? new URLSearchParams() : useSearchParams();
  const canUseWindowHistoryAPIs = typeof window !== "undefined" && window.next && window.next.version >= NEXT_WINDOW_HISTORY_SUPPORT_VERSION;
  return {
    mode: "path",
    name: "NextRouter",
    push: (path) => router.push(path),
    replace: (path) => canUseWindowHistoryAPIs ? window.history.replaceState(null, "", path) : router.replace(path),
    shallowPush(path) {
      canUseWindowHistoryAPIs ? window.history.pushState(null, "", path) : router.push(path, {});
    },
    pathname: () => pathname,
    searchParams: () => searchParams
  };
};

// src/react/router/virtual.ts
import { useSyncExternalStore } from "react";
var DUMMY_ORIGIN = "https://clerk.dummy";
var _url, _listeners;
var VirtualRouter = class {
  constructor(path) {
    this.name = "VirtualRouter";
    this.mode = "virtual";
    __privateAdd(this, _url);
    __privateAdd(this, _listeners, /* @__PURE__ */ new Set());
    const origin = typeof window === "undefined" ? DUMMY_ORIGIN : window.location.origin;
    __privateSet(this, _url, new URL(path != null ? path : "/", origin));
  }
  push(path) {
    const newUrl = new URL(__privateGet(this, _url).toString());
    newUrl.pathname = path;
    __privateSet(this, _url, newUrl);
    this.emit();
  }
  replace(path) {
    this.push(path);
  }
  shallowPush(path) {
    this.push(path);
  }
  pathname() {
    return __privateGet(this, _url).pathname;
  }
  searchParams() {
    return __privateGet(this, _url).searchParams;
  }
  subscribe(listener) {
    __privateGet(this, _listeners).add(listener);
    return () => __privateGet(this, _listeners).delete(listener);
  }
  emit() {
    __privateGet(this, _listeners).forEach((listener) => listener(__privateGet(this, _url)));
  }
  getSnapshot() {
    return __privateGet(this, _url);
  }
};
_url = new WeakMap();
_listeners = new WeakMap();
var virtualRouter = new VirtualRouter("/");
var useVirtualRouter = () => {
  const url = useSyncExternalStore(
    virtualRouter.subscribe.bind(virtualRouter),
    virtualRouter.getSnapshot.bind(virtualRouter)
  );
  return {
    mode: virtualRouter.mode,
    name: virtualRouter.name,
    pathname: () => url.pathname,
    push: virtualRouter.push.bind(virtualRouter),
    replace: virtualRouter.replace.bind(virtualRouter),
    searchParams: () => url.searchParams,
    shallowPush: virtualRouter.shallowPush.bind(virtualRouter)
  };
};

// src/react/router/index.ts
import { Route, Router, useClerkRouter } from "@clerk/shared/router";

// src/react/utils/path-inference/next.tsx
import { useRouter as useRouter2 } from "next/compat/router";
import { useParams, usePathname as usePathname2 } from "next/navigation";
import React from "react";

// src/react/utils/path-inference/utils.ts
function removeOptionalCatchAllSegment(pathname) {
  return pathname.replace(/\/\[\[\.\.\..*/, "");
}

// src/react/utils/path-inference/next.tsx
var usePathnameWithoutCatchAll = () => {
  const pathRef = React.useRef();
  const pagesRouter = useRouter2();
  if (pagesRouter) {
    if (pathRef.current) {
      return pathRef.current;
    } else {
      pathRef.current = removeOptionalCatchAllSegment(pagesRouter.pathname);
      return pathRef.current;
    }
  }
  const pathname = usePathname2() || "";
  const pathParts = pathname.split("/").filter(Boolean);
  const catchAllParams = Object.values(useParams() || {}).filter((v) => Array.isArray(v)).flat(Infinity);
  if (pathRef.current) {
    return pathRef.current;
  } else {
    pathRef.current = `/${pathParts.slice(0, pathParts.length - catchAllParams.length).join("/")}`;
    return pathRef.current;
  }
};

export {
  useNextRouter,
  useVirtualRouter,
  Router,
  useClerkRouter,
  usePathnameWithoutCatchAll
};
//# sourceMappingURL=chunk-7WFXAEQQ.mjs.map